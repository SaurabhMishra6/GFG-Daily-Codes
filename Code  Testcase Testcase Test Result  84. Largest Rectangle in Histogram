/*
Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. For simplicity, assume that all bars have the same width and the width is 1 unit, there will be N bars height of each bar will be given by the array arr.
*/

class Solution {
    public int largestRectangleArea(int[] arr) {
    int n = arr.length;
			
    int right[]= new int[arr.length];
		int left[]= new int[arr.length];
 		int res=0; // find the max area
		Stack<Integer> s = new Stack<>();
		Stack<Integer> s2 = new Stack<>();

        //if(n == 0) return 0;

		//NEAREST SMALLER TO left
		for (int i = 0; i < arr.length; i++) {
			if (s.isEmpty()) {
				left[i]=-1;
			} else if (arr[s.peek()] < arr[i]) {
				left[i]= s.peek();
			} else if (arr[s.peek()] >= arr[i]) {
				while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {
					s.pop();
				}
				if (s.isEmpty()) {
					left[i]=-1;
				} else {
					left[i] = s.peek();
				}
			}
			s.push(i);
		}
		
		// NEAEREST SMALLER TO RIGHT
		for (int i = arr.length-1; i >=0; i--) {
			if (s2.isEmpty()) {
				right[i]=arr.length;
			} else if (arr[s2.peek()] < arr[i]) {
				right[i]= s2.peek();
			} else if (arr[s2.peek()] >= arr[i]) {
				while (!s2.isEmpty() && arr[s2.peek()] >= arr[i]) {
					s2.pop();
				}
				if (s2.isEmpty()) {
					right[i]=arr.length;
				} else {
					right[i] = s2.peek();
				}
			}
			s2.push(i);
		}
		//calculate width= index of right - index of left -1
		int width[] = new int[arr.length];
		for (int i = 0; i < arr.length; i++) {
			width[i] = right[i]-left[i]-1;
		}
		//calculating max area  element * width
		for (int i = 0; i < width.length; i++) {
			res = Math.max(res, arr[i]*width[i]);
		}
        return res;
    }
}
